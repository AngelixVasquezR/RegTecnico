@page "/Cliente/Index"
@inject ClienteService clienteService
@inject TecnicosService tecnicoService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Clientes</PageTitle>

<div class="shadow-lg">
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3><strong>Listado de Clientes</strong></h3>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>

                <div class="col-4">
                    <label class="col-form-label"><strong>B&uacute;squeda</strong></label>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opci&oacute;n</option>
                        <option value="Id">Id</option>
                        <option value="Nombres">Nombre</option>
                        <option value="Direccion">Direcci&oacute;n</option>
                        <option value="Rnc">RNC</option>
                        <option value="LimiteCredito">L&iacute;mite de Cr&eacute;dito</option>
                        <option value="TecnicoId">Nombre del T&eacute;cnico</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary" @onclick="Buscar">Buscar</button>
                    </div>
                </div>
            </div>

            <div class="col-3 mt-2">
                <button type="button" class="btn btn-primary" @onclick="PantallaCrear">Crear</button>
            </div>

            <table class="table table-bordered text-center mt-4">
                <thead>
                    <tr>
                        <th>ID de Cliente</th>
                        <th>Fecha de Ingreso</th>
                        <th>Nombres</th>
                        <th>Direcci&oacute;n</th>
                        <th>RNC</th>
                        <th>L&iacute;mite de Cr&eacute;dito</th>
                        <th>T&eacute;cnico</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in ListaClientes)
                    {
                        <tr>
                            <td>@cliente.ClienteId</td>
                            <td>@cliente.FechaIngreso.ToString("dd/MM/yyyy")</td>
                            <td>@cliente.Nombres</td>
                            <td>@cliente.Direccion</td>
                            <td>@cliente.RNC</td>
                            <td>@($"{cliente.LimiteCredito:N2}")</td>
                            <td>@(TecnicosDiccionario.ContainsKey(cliente.TecnicoId) ? TecnicosDiccionario[cliente.TecnicoId] : "Desconocido")</td>
                            <td>
                                <button type="button" class="btn btn-warning bi bi-pencil-square" @onclick="() => PantallaEditar(cliente.ClienteId)"></button>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger bi bi-trash" @onclick="() => PantallaEliminar(cliente.ClienteId)"></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer">
            <p><strong>Total de Clientes: </strong>@ListaClientes.Count</p>
        </div>
    </div>
</div>

@code {
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public Dictionary<int, string> TecnicosDiccionario { get; set; } = new Dictionary<int, string>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Cargar lista de clientes
        ListaClientes = await clienteService.Listar(e => e.ClienteId > 0);

        // Cargar nombres de los técnicos
        var tecnicos = await tecnicoService.Listar(e => e.TecnicoId > 0);
        TecnicosDiccionario = tecnicos.ToDictionary(t => t.TecnicoId, t => t.Nombres);
    }

    public void PantallaCrear() => navigationManager.NavigateTo("/Clientes/Create");

    public void PantallaEditar(int id)
    {
        navigationManager.NavigateTo($"/Clientes/Edit/{id}");
    }

    public void PantallaEliminar(int id)
    {
        navigationManager.NavigateTo($"/Clientes/Delete/{id}");
    }

    private async Task Buscar()
    {
        if (ValorFiltro.Trim() != "")
        {
            if (Filtro == "Id" && int.TryParse(ValorFiltro, out int clienteId))
                ListaClientes = await clienteService.Listar(e => e.ClienteId == clienteId);
            else if (Filtro == "Nombres")
                ListaClientes = await clienteService.Listar(e => e.Nombres.ToLower().Contains(ValorFiltro.ToLower()));
            else if (Filtro == "Direccion")
                ListaClientes = await clienteService.Listar(e => e.Direccion.ToLower().Contains(ValorFiltro.ToLower()));
            else if (Filtro == "Rnc")
                ListaClientes = await clienteService.Listar(e => e.RNC.ToLower().Contains(ValorFiltro.ToLower()));
            else if (Filtro == "LimiteCredito" && decimal.TryParse(ValorFiltro, out decimal limiteCredito))
                ListaClientes = await clienteService.Listar(e => e.LimiteCredito == limiteCredito);
            else if (Filtro == "TecnicoId")
                ListaClientes = await clienteService.Listar(e => TecnicosDiccionario[e.TecnicoId].ToLower().Contains(ValorFiltro.ToLower()));
        }
        else
        {
            ListaClientes = await clienteService.Listar(e => e.ClienteId > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaClientes = await clienteService.Listar(e => e.ClienteId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}